@page "/book/update"

@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers
@using aspnetblazor.Pages.Books.Update.Components
@inject ILogger<Index> Logger

@using System.Net.Http
@inject HttpClient Http
@using System.Net.Http.Json

@inject IConfiguration Configuration

<div class="col-md-6">
<EditForm Model="@feed" OnValidSubmit="@HandleValidSubmit">
    <ZardTextInput Label="Title" @bind-Value="feed.Title" ValidationFor="@(() => feed.Title)"></ZardTextInput>
</EditForm>


    @foreach (var item in feedItems)
    {   
            <div style="display: flex; justify-content: space-between">
                <div> @item.Id </div>
            @if (item.Type.Equals("header"))
            {
                        <Header feedItem="@item"></Header>
            }
            @if (item.Type.Equals("text"))
            {
                        <TextField feedItem="@item"></TextField>

            }
                <button class="btn btn-danger" @onclick="e => DeleteItem(item.Id)">Delete</button>
            </div>

    }

    <div style="display: flex">
        <button class="btn btn-primary mr-2" @onclick=@(e => AddItem("header"))> Add Header</button>
        <button class="btn btn-primary"  @onclick=@(e => AddItem("text"))>Add Text</button>
    </div>


</div>


@code {
    private Feed feed = new Feed();
    private List<FeedItem> feedItems = new List<FeedItem>();

    private int Id = 0;
    private List<CustomLibrary.Inputs.Models.Choice> TitleChoices = new List<CustomLibrary.Inputs.Models.Choice>();

    protected override async Task OnInitializedAsync()
    {
        await GetTodoItems();

    }
    private async Task GetTodoItems()
    {
        feedItems = await Http.GetFromJsonAsync<List<FeedItem>>($"{Configuration["API"]}/api/feeditems");
        StateHasChanged();

    }

    private async Task AddItem(string type)
    {
        var requestMessage = new HttpRequestMessage()
        {
            Method = new HttpMethod("POST"),
            RequestUri = new Uri($"{Configuration["API"]}/api/feeditems"),
            Content =
                JsonContent.Create(new FeedItem
                {
                    FeedId = 1,
                    Type = type
                })
        };

        var token = "";

        requestMessage.Content.Headers.TryAddWithoutValidation(
            "token", token);

        var res = await Http.SendAsync(requestMessage);

         if (res.IsSuccessStatusCode)
        {
            var data = await res.Content.ReadFromJsonAsync<FeedItem>();
            this.feedItems.Add(data);

            StateHasChanged();

        }

    }


    private async Task DeleteItem(long id)
    {
        var res = await Http.DeleteAsync($"{Configuration["API"]}/api/feeditems/{id}");
        if (res.IsSuccessStatusCode)
        {
            var removeItem = this.feedItems.Single(item => item.Id == id);
            this.feedItems.Remove(removeItem);
            StateHasChanged();
        }

    }

    private void HandleValidSubmit()
    {
        Logger.LogInformation("HandleValidSubmit called");

        // Process the valid form
    }
}

<SurveyPrompt Title="How is Blazor working for you?" />
