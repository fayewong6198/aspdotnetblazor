@inherits InputBase<string>
@using System.Linq.Expressions
@using System


<div class="form-group">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label for="@Id">@Label</label>
    }
    <div class="form-control-validation">
        <ValidationMessage For="@ValidationFor" />
    </div>

    <div class="dropdown show">
        <div class="dropdown-toggle form-control @CssClass" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"
            style="width: 100%; background: white; color: black; border-color: #ced4da; border-radius: 0.25rem"
        >
            @CurrentValue
        </div>

        <div class="dropdown-menu" aria-labelledby="dropdownMenuLink" style="width: 100%">

            <input class="form-control" @bind="SearchValue" @oninput="OnInput"> 
            @if (FilteredChoices != null) {
                @foreach (var item in FilteredChoices)
                {
                    <a class="dropdown-item dropdown-item-dont-close" style="width: 100%" @onmousedown="e => SelectChoice(item.Value)" @onclick:stopPropagation="false" > @item.Label </a>     
                }
            }
            
        </div>

    </div>
</div>

@code {
    [Parameter] public string Id { get; set; }
    [Parameter] public string Label { get; set; }
    [Parameter] public Expression<Func<string>> ValidationFor { get; set; }
    [Parameter] public List<Models.Choice> Choices {get;set;}
    [Parameter] public List<Models.Choice> FilteredChoices {get;set;}


    public string SearchValue{get;set; }
    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    private void OnInput(Microsoft.AspNetCore.Components.ChangeEventArgs args) {
        this.SearchValue = (string)args.Value;

        Console.WriteLine(SearchValue);

        FilteredChoices = new List<Models.Choice>();

        foreach (var item in Choices)
        {   
            if (item.Value.ToLower().Contains(SearchValue.ToLower())) {
                FilteredChoices.Add(new Models.Choice(item.Label, item.Value) );

            }
        }
    }

     protected override void OnInitialized()
    {
        SearchValue = "";
        FilteredChoices = new List<Models.Choice>();

        foreach (var item in Choices)
        {
            FilteredChoices.Add(new Models.Choice(item.Label, item.Value) );
        }
    }
    private void SelectChoice(string value) {
        this.CurrentValue = value;
    }
}